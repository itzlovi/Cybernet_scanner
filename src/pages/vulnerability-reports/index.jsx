import React, { useState, useEffect, useCallback } from 'react';
import * as Icons from 'lucide-react';
import vulnerabilityTrend from '../../images/vulnerability.png';
import distributionChart from '../../images/dis.png';

// Add proper type checking for stat prop
const StatsCard = ({ stat, hoveredCard, setHoveredCard, animatedStats }) => {
  if (!stat || !stat.key) return null;
  
  return (
    <div
      className="relative group cursor-pointer"
      onMouseEnter={() => setHoveredCard(stat.key)}
      onMouseLeave={() => setHoveredCard(null)}
    >
      <div className={`p-6 rounded-xl bg-gradient-to-br ${stat.color} bg-opacity-10 border border-opacity-30 transition-all duration-500 transform hover:scale-105 hover:shadow-2xl backdrop-blur-sm ${
        hoveredCard === stat.key ? 'shadow-2xl' : 'shadow-lg'
      }`} style={{ borderColor: `var(--${stat.key}-color, #64748b)` }}>
        
        {/* Animated background */}
        <div className="absolute inset-0 rounded-xl bg-gradient-to-br from-transparent via-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        
        {/* Holographic effect */}
        {hoveredCard === stat.key && (
          <div className="absolute inset-0 rounded-xl animate-pulse border-2" style={{ borderColor: `var(--${stat.key}-color, #64748b)` }}></div>
        )}
        
        <div className="flex items-center justify-between relative z-10">
          <div>
            <div className="text-3xl font-black text-white mb-1 font-mono">
              {animatedStats[stat.key] || 0}
            </div>
            <div className="text-sm font-bold text-gray-300 tracking-wider">
              {stat.label}
            </div>
          </div>
          <div className={`p-3 rounded-lg bg-gradient-to-br ${stat.color} shadow-lg`}>
            <stat.icon size={24} className="text-white" />
          </div>
        </div>
        
        {/* Progress bar */}
        <div className="mt-2 h-2 bg-gray-700 rounded-full overflow-hidden">
          <div 
            className={`h-full bg-gradient-to-r ${stat.color} transition-all duration-1000`}
            style={{ width: `${Math.min((animatedStats[stat.key] || 0) / 2, 100)}%` }}
          ></div>
        </div>
      </div>
    </div>
  );
};

const VulnerabilityReports = () => {
  // Initialize state with default values
  const [selectedTimeRange, setSelectedTimeRange] = useState('7d');
  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [animatedStats, setAnimatedStats] = useState({});
  const [scanningActive, setScanningActive] = useState(false);
  const [matrixRain, setMatrixRain] = useState([]);
  const [glitchEffect, setGlitchEffect] = useState(false);
  const [hoveredCard, setHoveredCard] = useState(null);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  // Clean up intervals
  useEffect(() => {
    const intervals = [];
    
    try {
      const stats = { critical: 15, high: 42, medium: 128, low: 234, resolved: 89 };
      Object.keys(stats).forEach(key => {
        let current = 0;
        const target = stats[key];
        const increment = target / 50;
        const timer = setInterval(() => {
          current += increment;
          if (current >= target) {
            current = target;
            clearInterval(timer);
          }
          setAnimatedStats(prev => ({ ...prev, [key]: Math.floor(current) }));
        }, 30);
        intervals.push(timer);
      });
    } catch (error) {
      setError(error);
    }

    return () => intervals.forEach(clearInterval);
  }, []);

  // Matrix rain effect
  useEffect(() => {
    const chars = '01アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲン';
    const drops = Array(50).fill(0).map(() => ({
      x: Math.random() * 100,
      y: Math.random() * 100,
      speed: Math.random() * 2 + 1,
      char: chars[Math.floor(Math.random() * chars.length)]
    }));
    setMatrixRain(drops);

    const interval = setInterval(() => {
      setMatrixRain(drops => drops.map(drop => ({
        ...drop,
        y: drop.y > 100 ? -5 : drop.y + drop.speed,
        char: Math.random() > 0.98 ? chars[Math.floor(Math.random() * chars.length)] : drop.char
      })));
    }, 100);

    return () => clearInterval(interval);
  }, []);

  // Scanning effect
  useEffect(() => {
    const interval = setInterval(() => {
      setScanningActive(true);
      setTimeout(() => setScanningActive(false), 3000);
    }, 10000);
    return () => clearInterval(interval);
  }, []);

  // Glitch effect
  useEffect(() => {
    const interval = setInterval(() => {
      setGlitchEffect(true);
      setTimeout(() => setGlitchEffect(false), 200);
    }, 8000);
    return () => clearInterval(interval);
  }, []);

  // Loading effect
  useEffect(() => {
    const timer = setTimeout(() => setIsLoading(false), 1000);
    return () => clearTimeout(timer);
  }, []);

  const vulnerabilityData = [
    {
      id: 'CVE-2024-0001',
      title: 'SQL Injection in Authentication Module',
      severity: 'critical',
      score: 9.8,
      status: 'active',
      detected: '2024-06-08',
      category: 'Database',
      affected: 'auth.example.com',
      description: 'Critical SQL injection vulnerability allowing unauthorized access'
    },
    {
      id: 'CVE-2024-0002',
      title: 'Cross-Site Scripting (XSS) Vulnerability',
      severity: 'high',
      score: 7.5,
      status: 'patching',
      detected: '2024-06-07',
      category: 'Web Application',
      affected: 'dashboard.example.com',
      description: 'Stored XSS vulnerability in user input fields'
    },
    {
      id: 'CVE-2024-0003',
      title: 'Insecure Direct Object Reference',
      severity: 'medium',
      score: 6.2,
      status: 'resolved',
      detected: '2024-06-05',
      category: 'API',
      affected: 'api.example.com',
      description: 'IDOR vulnerability allowing access to unauthorized resources'
    }
  ];

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return 'from-red-500 to-red-700';
      case 'high': return 'from-orange-500 to-red-500';
      case 'medium': return 'from-yellow-500 to-orange-500';
      case 'low': return 'from-green-500 to-yellow-500';
      default: return 'from-gray-500 to-gray-700';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'active': return <Icons.AlertTriangle className="w-4 h-4 text-red-400" />;
      case 'patching': return <Icons.RefreshCw className="w-4 h-4 text-yellow-400 animate-spin" />;
      case 'resolved': return <Icons.CheckCircle className="w-4 h-4 text-green-400" />;
      default: return <Icons.XCircle className="w-4 h-4 text-gray-400" />;
    }
  };

  if (error) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-red-400">
          Error loading vulnerability reports: {error.message}
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-cyan-400 text-xl font-mono animate-pulse">
          <Icons.Loader className="w-8 h-8 animate-spin inline mr-2" />
          Loading Vulnerability Reports...
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white relative overflow-hidden">
      {/* Matrix Rain Background */}
      <div className="fixed inset-0 pointer-events-none z-0 opacity-10">
        {matrixRain.map((drop, i) => (
          <div
            key={i}
            className="absolute text-green-400 text-xs font-mono animate-pulse"
            style={{
              left: `${drop.x}%`,
              top: `${drop.y}%`,
              animationDelay: `${i * 0.1}s`
            }}
          >
            {drop.char}
          </div>
        ))}
      </div>

      {/* Animated Background Grid */}
      <div className="fixed inset-0 pointer-events-none z-0 opacity-20">
        <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/10 via-purple-500/5 to-pink-500/10"></div>
        <div className="absolute inset-0" style={{
          backgroundImage: `
            linear-gradient(rgba(34, 211, 238, 0.1) 1px, transparent 1px),
            linear-gradient(90deg, rgba(34, 211, 238, 0.1) 1px, transparent 1px)
          `,
          backgroundSize: '50px 50px'
        }}></div>
      </div>

      {/* Scanning Line Effect */}
      {scanningActive && (
        <div className="fixed inset-0 pointer-events-none z-10">
          <div className="absolute w-full h-1 bg-gradient-to-r from-transparent via-cyan-400 to-transparent animate-pulse shadow-lg shadow-cyan-400/50" style={{
            top: '50%',
            animation: 'scan-vertical 3s ease-in-out'
          }}></div>
        </div>
      )}

      {/* Main Content */}
      <div className={`relative z-20 ${glitchEffect ? 'animate-pulse' : ''}`}>
        {/* Header */}
        <div className="p-8 border-b border-cyan-500/20 bg-black/50 backdrop-blur-xl">
          <div className="max-w-7xl mx-auto">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="p-3 rounded-xl bg-gradient-to-br from-red-500 to-orange-500 shadow-lg shadow-red-500/25 animate-pulse">
                  <Icons.FileText size={32} className="text-white" />
                </div>
                <div>
                  <h1 className="text-4xl font-black bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
                    VULNERABILITY REPORTS
                  </h1>
                  <p className="text-gray-400 font-mono text-sm mt-1">
                    <span className="text-green-400">●</span> REAL-TIME SECURITY ANALYSIS
                  </p>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <button className="px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-lg font-bold text-white hover:from-cyan-400 hover:to-blue-500 transition-all duration-300 transform hover:scale-105 shadow-lg shadow-cyan-500/25 hover:shadow-cyan-500/40">
                  <Icons.Download className="w-4 h-4 inline mr-2" />
                  EXPORT REPORT
                </button>
                <button className="px-6 py-3 bg-gray-800/50 border border-cyan-500/30 rounded-lg font-bold text-cyan-400 hover:bg-gray-700/50 hover:border-cyan-400/60 transition-all duration-300 backdrop-blur-sm">
                  <Icons.RefreshCw className="w-4 h-4 inline mr-2" />
                  REFRESH
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="p-8">
          <div className="max-w-7xl mx-auto">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
              {[
                { key: 'critical', label: 'CRITICAL', icon: Icons.AlertTriangle, color: 'from-red-500 to-red-700' },
                { key: 'high', label: 'HIGH', icon: Icons.AlertOctagon, color: 'from-orange-500 to-red-500' },
                { key: 'medium', label: 'MEDIUM', icon: Icons.Info, color: 'from-yellow-500 to-orange-500' },
                { key: 'low', label: 'LOW', icon: Icons.CheckCircle, color: 'from-green-500 to-yellow-500' },
                { key: 'resolved', label: 'RESOLVED', icon: Icons.Shield, color: 'from-green-500 to-emerald-500' }
              ].map((stat, index) => (
                <StatsCard 
                  key={stat.key}
                  stat={stat}
                  hoveredCard={hoveredCard}
                  setHoveredCard={setHoveredCard}
                  animatedStats={animatedStats}
                />
              ))}
            </div>

            {/* Filters and Search */}
            <div className="bg-gray-900/50 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6 mb-8">
              <div className="flex flex-wrap items-center justify-between gap-4">
                <div className="flex items-center space-x-4">
                  <div className="relative">
                    <Icons.Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                    <input
                      type="text"
                      placeholder="Search vulnerabilities..."
                      className="pl-10 pr-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none focus:ring-2 focus:ring-cyan-400/20 transition-all duration-300 w-80"
                    />
                  </div>
                  
                  <select
                    value={selectedSeverity}
                    onChange={(e) => setSelectedSeverity(e.target.value)}
                    className="px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg text-white focus:border-cyan-400 focus:outline-none focus:ring-2 focus:ring-cyan-400/20 transition-all duration-300"
                  >
                    <option value="all">All Severities</option>
                    <option value="critical">Critical</option>
                    <option value="high">High</option>
                    <option value="medium">Medium</option>
                    <option value="low">Low</option>
                  </select>
                  
                  <select
                    value={selectedTimeRange}
                    onChange={(e) => setSelectedTimeRange(e.target.value)}
                    className="px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg text-white focus:border-cyan-400 focus:outline-none focus:ring-2 focus:ring-cyan-400/20 transition-all duration-300"
                  >
                    <option value="1d">Last 24 Hours</option>
                    <option value="7d">Last 7 Days</option>
                    <option value="30d">Last 30 Days</option>
                    <option value="90d">Last 90 Days</option>
                  </select>
                </div>
                
                <div className="flex items-center space-x-2">
                  <button className="px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg text-gray-300 hover:text-cyan-400 hover:border-cyan-400/60 transition-all duration-300">
                    <Icons.Filter className="w-5 h-5" />
                  </button>
                  <button className="px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg text-gray-300 hover:text-cyan-400 hover:border-cyan-400/60 transition-all duration-300">
                    <Icons.Calendar className="w-5 h-5" />
                  </button>
                </div>
              </div>
            </div>

            {/* Vulnerability Table */}
            <div className="bg-gray-900/50 backdrop-blur-xl rounded-xl border border-cyan-500/20 overflow-hidden">
              <div className="p-6 border-b border-gray-700">
                <h2 className="text-2xl font-bold text-white mb-2">Active Vulnerabilities</h2>
                <p className="text-gray-400">Detailed analysis of security vulnerabilities</p>
              </div>
              
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-800/50">
                    <tr>
                      <th className="px-6 py-4 text-left text-xs font-bold text-cyan-400 uppercase tracking-wider">ID</th>
                      <th className="px-6 py-4 text-left text-xs font-bold text-cyan-400 uppercase tracking-wider">Vulnerability</th>
                      <th className="px-6 py-4 text-left text-xs font-bold text-cyan-400 uppercase tracking-wider">Severity</th>
                      <th className="px-6 py-4 text-left text-xs font-bold text-cyan-400 uppercase tracking-wider">Score</th>
                      <th className="px-6 py-4 text-left text-xs font-bold text-cyan-400 uppercase tracking-wider">Status</th>
                      <th className="px-6 py-4 text-left text-xs font-bold text-cyan-400 uppercase tracking-wider">Detected</th>
                      <th className="px-6 py-4 text-left text-xs font-bold text-cyan-400 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-700">
                    {vulnerabilityData.map((vuln, index) => (
                      <tr key={vuln.id} className="hover:bg-gray-800/30 transition-all duration-300 group">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className="text-cyan-400 font-mono font-bold">{vuln.id}</span>
                        </td>
                        <td className="px-6 py-4">
                          <div>
                            <div className="text-white font-semibold group-hover:text-cyan-300 transition-colors duration-300">
                              {vuln.title}
                            </div>
                            <div className="text-gray-400 text-sm mt-1">{vuln.description}</div>
                            <div className="text-purple-400 text-sm mt-1">{vuln.affected}</div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-bold uppercase tracking-wider bg-gradient-to-r ${getSeverityColor(vuln.severity)} text-white shadow-lg`}>
                            {vuln.severity}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className={`text-2xl font-bold ${vuln.score >= 9 ? 'text-red-400' : vuln.score >= 7 ? 'text-orange-400' : vuln.score >= 4 ? 'text-yellow-400' : 'text-green-400'}`}>
                              {vuln.score}
                            </div>
                            <div className="text-gray-400 text-sm ml-1">/10</div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center space-x-2">
                            {getStatusIcon(vuln.status)}
                            <span className="text-white font-medium capitalize">{vuln.status}</span>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-gray-400 font-mono">
                          {vuln.detected}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center space-x-2">
                            <button className="p-2 bg-cyan-500/20 border border-cyan-500/30 rounded-lg text-cyan-400 hover:bg-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300">
                              <Icons.Eye className="w-4 h-4" />
                            </button>
                            <button className="p-2 bg-purple-500/20 border border-purple-500/30 rounded-lg text-purple-400 hover:bg-purple-500/30 hover:border-purple-400/60 transition-all duration-300">
                              <Icons.ExternalLink className="w-4 h-4" />
                            </button>
                            <button className="p-2 bg-red-500/20 border border-red-500/30 rounded-lg text-red-400 hover:bg-red-500/30 hover:border-red-400/60 transition-all duration-300">
                              <Icons.Target className="w-4 h-4" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* Charts Section */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8">
              {/* Trend Chart */}
              <div className="bg-gray-900/50 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6">
                <h3 className="text-xl font-bold text-white mb-4">Vulnerability Trends</h3>
                <div className="h-64 relative overflow-hidden rounded-lg">
                  <img 
                    src={vulnerabilityTrend} 
                    alt="Vulnerability Trends Chart" 
                    className="w-full h-full object-cover object-center rounded-lg"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-gray-900/20 to-transparent"></div>
                </div>
              </div>

              {/* Distribution Chart */}
              <div className="bg-gray-900/50 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6">
                <h3 className="text-xl font-bold text-white mb-4">Severity Distribution</h3>
                <div className="h-64 relative overflow-hidden rounded-lg">
                  <img 
                    src={distributionChart} 
                    alt="Severity Distribution Chart" 
                    className="w-full h-full object-cover object-center rounded-lg"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-gray-900/20 to-transparent"></div>
                </div>
              </div>
            </div>

            {/* System Health */}
            <div className="mt-8 bg-gray-900/50 backdrop-blur-xl rounded-xl border border-cyan-500/20 p-6">
              <h3 className="text-xl font-bold text-white mb-6">System Health Monitor</h3>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                {[
                  { label: 'CPU Usage', value: 23, icon: Icons.Cpu, colorClass: 'text-cyan-400' },
                  { label: 'Memory', value: 67, icon: Icons.HardDrive, colorClass: 'text-purple-400' },
                  { label: 'Network', value: 45, icon: Icons.Network, colorClass: 'text-green-400' },
                  { label: 'Security', value: 92, icon: Icons.Shield, colorClass: 'text-blue-400' }
                ].map((metric, index) => (
                  <div key={index} className="text-center">
                    <div className={`w-20 h-20 mx-auto mb-4 rounded-full flex items-center justify-center bg-gray-800/50 border-2 border-gray-600 ${metric.colorClass}`}>
                      <metric.icon className="w-8 h-8" />
                    </div>
                    <div className={`text-2xl font-bold mb-1 ${metric.colorClass}`}>{metric.value}%</div>
                    <div className="text-gray-400 text-sm">{metric.label}</div>
                    <div className="mt-2 h-2 bg-gray-700 rounded-full overflow-hidden">
                      <div 
                        className={`h-full bg-gradient-to-r ${metric.colorClass.includes('cyan') ? 'from-cyan-500 to-cyan-600' : metric.colorClass.includes('purple') ? 'from-purple-500 to-purple-600' : metric.colorClass.includes('green') ? 'from-green-500 to-green-600' : 'from-blue-500 to-blue-600'} transition-all duration-1000`}
                        style={{ width: `${metric.value}%` }}
                      ></div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityReports;