import React, { useState, useEffect } from 'react';
import { AlertTriangle, Shield, Search, Server, Network, Bug, Clock, CheckCircle, XCircle, Play, Pause, RotateCcw, Filter, Download, Eye, Settings, ChevronRight, Activity, FileText, ExternalLink } from 'lucide-react';

const VulnerabilityScanner = () => {
  const [currentScan, setCurrentScan] = useState(null);
  const [scanHistory, setScanHistory] = useState([]);
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [filter, setFilter] = useState('all');
  const [scanProgress, setScanProgress] = useState(0);

  // Mock vulnerability data
  const vulnerabilities = [
    {
      id: 'CVE-2024-0001',
      title: 'Critical SQL Injection in Web Application',
      severity: 'critical',
      cvss: 9.8,
      description: 'SQL injection vulnerability in login form allows unauthorized database access',
      target: 'Web Server (192.168.1.100)',
      port: 80,
      service: 'HTTP',
      status: 'active',
      firstSeen: new Date(Date.now() - 3600000),
      lastSeen: new Date(Date.now() - 300000),
      category: 'injection',
      remediation: 'Update web application framework and implement parameterized queries',
      references: ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0001'],
      exploitability: 'high'
    },
    {
      id: 'CVE-2024-0002',
      title: 'Buffer Overflow in Network Service',
      severity: 'high',
      cvss: 8.1,
      description: 'Buffer overflow vulnerability in custom network service allows remote code execution',
      target: 'Database Server (192.168.1.101)',
      port: 3306,
      service: 'MySQL',
      status: 'active',
      firstSeen: new Date(Date.now() - 7200000),
      lastSeen: new Date(Date.now() - 1800000),
      category: 'buffer-overflow',
      remediation: 'Apply security patch version 8.0.35 or later',
      references: ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0002'],
      exploitability: 'medium'
    },
    {
      id: 'CVE-2024-0003',
      title: 'Cross-Site Scripting (XSS) Vulnerability',
      severity: 'medium',
      cvss: 6.1,
      description: 'Reflected XSS vulnerability in search functionality',
      target: 'Web Server (192.168.1.100)',
      port: 443,
      service: 'HTTPS',
      status: 'mitigated',
      firstSeen: new Date(Date.now() - 86400000),
      lastSeen: new Date(Date.now() - 3600000),
      category: 'xss',
      remediation: 'Implement proper input validation and output encoding',
      references: ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0003'],
      exploitability: 'low'
    },
    {
      id: 'CVE-2024-0004',
      title: 'Insecure Direct Object Reference',
      severity: 'medium',
      cvss: 5.4,
      description: 'Users can access unauthorized files by manipulating URL parameters',
      target: 'File Server (192.168.1.102)',
      port: 21,
      service: 'FTP',
      status: 'active',
      firstSeen: new Date(Date.now() - 172800000),
      lastSeen: new Date(Date.now() - 7200000),
      category: 'access-control',
      remediation: 'Implement proper access controls and file permissions',
      references: ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0004'],
      exploitability: 'medium'
    },
    {
      id: 'CVE-2024-0005',
      title: 'Weak SSL/TLS Configuration',
      severity: 'low',
      cvss: 3.7,
      description: 'Server supports weak cipher suites and outdated TLS versions',
      target: 'Web Server (192.168.1.100)',
      port: 443,
      service: 'HTTPS',
      status: 'active',
      firstSeen: new Date(Date.now() - 259200000),
      lastSeen: new Date(Date.now() - 10800000),
      category: 'crypto',
      remediation: 'Update SSL/TLS configuration to support only strong cipher suites',
      references: ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0005'],
      exploitability: 'low'
    }
  ];

  const scanTemplates = [
    {
      id: 'full-network',
      name: 'Full Network Scan',
      description: 'Comprehensive vulnerability assessment of all network devices',
      estimatedTime: '45-60 minutes',
      targets: 'All network devices',
      icon: Network
    },
    {
      id: 'web-app',
      name: 'Web Application Scan',
      description: 'Deep analysis of web applications and services',
      estimatedTime: '20-30 minutes',
      targets: 'Web servers and applications',
      icon: Search
    },
    {
      id: 'critical-assets',
      name: 'Critical Assets Only',
      description: 'Focus on servers and critical infrastructure',
      estimatedTime: '15-20 minutes',
      targets: 'Servers and critical systems',
      icon: Server
    },
    {
      id: 'custom',
      name: 'Custom Scan',
      description: 'Configure custom scan parameters',
      estimatedTime: 'Variable',
      targets: 'User-defined',
      icon: Settings
    }
  ];

  // Simulate scan progress
  useEffect(() => {
    if (currentScan && scanProgress < 100) {
      const interval = setInterval(() => {
        setScanProgress(prev => {
          const newProgress = Math.min(100, prev + Math.random() * 5);
          if (newProgress >= 100) {
            setCurrentScan(null);
            return 0;
          }
          return newProgress;
        });
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [currentScan, scanProgress]);

  const getSeverityColor = (severity) => {
    const colorMap = {
      critical: 'text-error border-error/50 bg-error/10',
      high: 'text-warning border-warning/50 bg-warning/10',
      medium: 'text-secondary border-secondary/50 bg-secondary/10',
      low: 'text-text-secondary border-surface-600 bg-surface-800'
    };
    return colorMap[severity] || colorMap.low;
  };

  const getSeverityIcon = (severity) => {
    const iconMap = {
      critical: AlertTriangle,
      high: AlertTriangle,
      medium: AlertTriangle,
      low: AlertTriangle
    };
    const IconComponent = iconMap[severity] || AlertTriangle;
    return <IconComponent size={16} />;
  };

  const startScan = (template) => {
    setCurrentScan(template);
    setScanProgress(0);
  };

  const stopScan = () => {
    setCurrentScan(null);
    setScanProgress(0);
  };

  const filteredVulnerabilities = filter === 'all' 
    ? vulnerabilities 
    : vulnerabilities.filter(vuln => vuln.severity === filter);

  const vulnerabilityStats = {
    total: vulnerabilities.length,
    critical: vulnerabilities.filter(v => v.severity === 'critical').length,
    high: vulnerabilities.filter(v => v.severity === 'high').length,
    medium: vulnerabilities.filter(v => v.severity === 'medium').length,
    low: vulnerabilities.filter(v => v.severity === 'low').length
  };

  const formatTimeAgo = (timestamp) => {
    const now = new Date();
    const diff = now - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (days > 0) return `${days}d ago`;
    if (hours > 0) return `${hours}h ago`;
    return `${minutes}m ago`;
  };

  return (
    <div className="min-h-screen bg-background">
      <main className="ml-72 pt-16 p-6 transition-all duration-300 ease-in-out">
        <div className="max-w-7xl mx-auto space-y-6">
          
          {/* Page Header */}
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-3xl font-heading font-bold text-primary glow-primary mb-2">
                Vulnerability Scanner
              </h1>
              <p className="text-text-secondary font-body">
                Comprehensive security vulnerability assessment and management
              </p>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className={`w-3 h-3 rounded-full ${currentScan ? 'bg-primary animate-pulse-glow' : 'bg-surface-600'}`} />
                <span className="text-sm font-caption text-text-secondary">
                  {currentScan ? 'Scanning Active' : 'Scanner Ready'}
                </span>
              </div>
              
              <button className="flex items-center space-x-2 bg-primary/20 hover:bg-primary/30 text-primary border border-primary/50 rounded-lg px-4 py-2 text-sm font-medium transition-cyber hover:glow-primary">
                <Download size={16} />
                <span>Export Report</span>
              </button>
            </div>
          </div>

          {/* Vulnerability Statistics */}
          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-5 gap-6 mb-8">
            {[
              { label: 'Total Vulnerabilities', value: vulnerabilityStats.total, color: 'primary', icon: Bug },
              { label: 'Critical', value: vulnerabilityStats.critical, color: 'error', icon: AlertTriangle },
              { label: 'High', value: vulnerabilityStats.high, color: 'warning', icon: AlertTriangle },
              { label: 'Medium', value: vulnerabilityStats.medium, color: 'secondary', icon: AlertTriangle },
              { label: 'Low', value: vulnerabilityStats.low, color: 'text-secondary', icon: AlertTriangle }
            ].map((stat, index) => (
              <div key={index} className="bg-surface border cyber-border rounded-lg p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-text-secondary font-caption text-sm mb-1">{stat.label}</p>
                    <p className={`text-2xl font-heading font-bold text-${stat.color}`}>{stat.value}</p>
                  </div>
                  <stat.icon className={`text-${stat.color}`} size={24} />
                </div>
              </div>
            ))}
          </div>

          {/* Current Scan Status */}
          {currentScan && (
            <div className="bg-surface border cyber-border rounded-lg p-6 mb-8">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 rounded-lg bg-primary/10 border border-primary/30 flex items-center justify-center">
                    <currentScan.icon className="text-primary" size={20} />
                  </div>
                  <div>
                    <h3 className="text-lg font-heading font-bold text-primary">{currentScan.name}</h3>
                    <p className="text-sm text-text-secondary">{currentScan.description}</p>
                  </div>
                </div>
                
                <button
                  onClick={stopScan}
                  className="flex items-center space-x-2 bg-error/20 hover:bg-error/30 text-error border border-error/50 rounded-lg px-4 py-2 text-sm font-medium transition-cyber hover:glow-error"
                >
                  <XCircle size={16} />
                  <span>Stop Scan</span>
                </button>
              </div>
              
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-text-secondary">Progress</span>
                  <span className="text-primary font-mono">{Math.round(scanProgress)}%</span>
                </div>
                <div className="w-full h-3 bg-surface-700 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-gradient-to-r from-primary to-secondary transition-all duration-1000 ease-out animate-pulse"
                    style={{ width: `${scanProgress}%` }}
                  />
                </div>
              </div>
            </div>
          )}

          <div className="grid grid-cols-1 xl:grid-cols-12 gap-6">
            
            {/* Scan Templates */}
            <div className="xl:col-span-4">
              <div className="bg-surface border cyber-border rounded-lg p-6">
                <div className="flex items-center justify-between mb-6">
                  <div>
                    <h2 className="text-xl font-heading font-bold text-primary">Scan Templates</h2>
                    <p className="text-sm text-text-secondary">Quick scan configurations</p>
                  </div>
                </div>

                <div className="space-y-3">
                  {scanTemplates.map(template => (
                    <div
                      key={template.id}
                      className="bg-surface-800 border border-surface-600 hover:border-primary/30 rounded-lg p-4 transition-cyber hover:glow-primary cursor-pointer group"
                      onClick={() => !currentScan && startScan(template)}
                    >
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 rounded-lg bg-primary/10 border border-primary/30 flex items-center justify-center flex-shrink-0">
                          <template.icon className="text-primary" size={18} />
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <h4 className="text-sm font-medium text-text-primary group-hover:text-primary transition-colors">
                            {template.name}
                          </h4>
                          <p className="text-xs text-text-secondary mb-2">
                            {template.description}
                          </p>
                          <div className="flex items-center justify-between text-xs">
                            <span className="text-text-secondary">
                              <Clock size={12} className="inline mr-1" />
                              {template.estimatedTime}
                            </span>
                            <ChevronRight className="text-primary" size={16} />
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Vulnerability List */}
            <div className="xl:col-span-8">
              <div className="bg-surface border cyber-border rounded-lg p-6">
                <div className="flex items-center justify-between mb-6">
                  <div>
                    <h2 className="text-xl font-heading font-bold text-primary">Active Vulnerabilities</h2>
                    <p className="text-sm text-text-secondary">Current security findings and recommendations</p>
                  </div>
                  
                  <div className="flex items-center space-x-4">
                    <div className="flex bg-surface-800 rounded-lg p-1 border border-surface-600">
                      {[
                        { key: 'all', label: 'All', count: vulnerabilityStats.total },
                        { key: 'critical', label: 'Critical', count: vulnerabilityStats.critical },
                        { key: 'high', label: 'High', count: vulnerabilityStats.high },
                        { key: 'medium', label: 'Medium', count: vulnerabilityStats.medium },
                        { key: 'low', label: 'Low', count: vulnerabilityStats.low }
                      ].map(({ key, label, count }) => (
                        <button
                          key={key}
                          onClick={() => setFilter(key)}
                          className={`flex items-center space-x-2 px-3 py-1 rounded-md text-sm font-medium transition-cyber ${
                            filter === key
                              ? 'bg-primary text-background'
                              : 'text-text-secondary hover:text-primary'
                          }`}
                        >
                          <span>{label}</span>
                          <span className={`px-1.5 py-0.5 rounded-full text-xs ${
                            filter === key ? 'bg-background/20' : 'bg-surface-600'
                          }`}>
                            {count}
                          </span>
                        </button>
                      ))}
                    </div>
                  </div>
                </div>

                <div className="space-y-3 max-h-96 overflow-y-auto">
                  {filteredVulnerabilities.map(vuln => (
                    <div
                      key={vuln.id}
                      className={`bg-surface-800 border rounded-lg p-4 cursor-pointer transition-cyber hover:glow-primary ${
                        selectedVulnerability?.id === vuln.id ? 'border-primary/50 glow-primary' : 'border-surface-600 hover:border-primary/30'
                      }`}
                      onClick={() => setSelectedVulnerability(selectedVulnerability?.id === vuln.id ? null : vuln)}
                    >
                      <div className="flex items-start space-x-3">
                        <div className={`w-8 h-8 rounded-lg border flex items-center justify-center flex-shrink-0 ${getSeverityColor(vuln.severity)}`}>
                          {getSeverityIcon(vuln.severity)}
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="text-sm font-medium text-text-primary truncate">
                              {vuln.title}
                            </h4>
                            <div className="flex items-center space-x-2">
                              <span className={`text-xs font-bold ${getSeverityColor(vuln.severity).split(' ')[0]}`}>
                                CVSS {vuln.cvss}
                              </span>
                              <span className="text-xs text-text-secondary">
                                {formatTimeAgo(vuln.lastSeen)}
                              </span>
                            </div>
                          </div>
                          
                          <p className="text-xs text-text-secondary mb-3 line-clamp-2">
                            {vuln.description}
                          </p>
                          
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3 text-xs">
                              <span className="text-text-secondary">
                                <Server size={12} className="inline mr-1" />
                                {vuln.target}
                              </span>
                              <span className="text-text-secondary">
                                Port {vuln.port}
                              </span>
                            </div>
                            
                            <span className={`text-xs px-2 py-1 rounded-full ${
                              vuln.status === 'active' ? 'bg-error/20 text-error' :
                              vuln.status === 'mitigated' ? 'bg-success/20 text-success' :
                              'bg-surface-600 text-text-secondary'
                            }`}>
                              {vuln.status}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Vulnerability Details Panel */}
          {selectedVulnerability && (
            <div className="bg-surface border border-primary/30 rounded-lg p-6 glow-primary">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center space-x-3">
                  <div className={`w-12 h-12 rounded-lg border flex items-center justify-center ${getSeverityColor(selectedVulnerability.severity)}`}>
                    {getSeverityIcon(selectedVulnerability.severity)}
                  </div>
                  <div>
                    <h3 className="text-xl font-heading font-bold text-primary">{selectedVulnerability.title}</h3>
                    <p className="text-sm text-text-secondary">{selectedVulnerability.id}</p>
                  </div>
                </div>
                
                <button
                  onClick={() => setSelectedVulnerability(null)}
                  className="text-text-secondary hover:text-primary transition-colors"
                >
                  <XCircle size={20} />
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-heading font-bold text-primary mb-2">Vulnerability Details</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-text-secondary">Severity:</span>
                        <span className={`font-medium capitalize ${getSeverityColor(selectedVulnerability.severity).split(' ')[0]}`}>
                          {selectedVulnerability.severity}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-text-secondary">CVSS Score:</span>
                        <span className="text-text-primary font-mono">{selectedVulnerability.cvss}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-text-secondary">Category:</span>
                        <span className="text-text-primary capitalize">{selectedVulnerability.category}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-text-secondary">Exploitability:</span>
                        <span className={`capitalize ${
                          selectedVulnerability.exploitability === 'high' ? 'text-error' :
                          selectedVulnerability.exploitability === 'medium' ? 'text-warning' :
                          'text-success'
                        }`}>
                          {selectedVulnerability.exploitability}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-heading font-bold text-primary mb-2">Target Information</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-text-secondary">Target:</span>
                        <span className="text-text-primary">{selectedVulnerability.target}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-text-secondary">Port:</span>
                        <span className="text-text-primary font-mono">{selectedVulnerability.port}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-text-secondary">Service:</span>
                        <span className="text-text-primary">{selectedVulnerability.service}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-text-secondary">Status:</span>
                        <span className={`capitalize ${
                          selectedVulnerability.status === 'active' ? 'text-error' :
                          selectedVulnerability.status === 'mitigated' ? 'text-success' :
                          'text-text-secondary'
                        }`}>
                          {selectedVulnerability.status}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-heading font-bold text-primary mb-2">Timeline</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-text-secondary">First Seen:</span>
                        <span className="text-text-primary">{formatTimeAgo(selectedVulnerability.firstSeen)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-text-secondary">Last Seen:</span>
                        <span className="text-text-primary">{formatTimeAgo(selectedVulnerability.lastSeen)}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <h4 className="text-sm font-heading font-bold text-primary mb-3">Description</h4>
                  <p className="text-sm text-text-secondary leading-relaxed">
                    {selectedVulnerability.description}
                  </p>
                </div>

                <div>
                  <h4 className="text-sm font-heading font-bold text-primary mb-3">Remediation</h4>
                  <p className="text-sm text-text-secondary leading-relaxed">
                    {selectedVulnerability.remediation}
                  </p>
                </div>
              </div>

              <div className="flex items-center justify-between pt-4 border-t border-surface-600">
                <div className="flex space-x-3">
                  <button className="flex items-center space-x-2 bg-primary/20 hover:bg-primary/30 text-primary border border-primary/50 rounded-lg px-4 py-2 text-sm font-medium transition-cyber hover:glow-primary">
                    <Shield size={16} />
                    <span>Mark as Mitigated</span>
                  </button>
                  
                  <button className="flex items-center space-x-2 bg-surface-700 hover:bg-surface-600 text-text-secondary hover:text-primary border border-surface-600 hover:border-primary/50 rounded-lg px-4 py-2 text-sm font-medium transition-cyber">
                    <Eye size={16} />
                    <span>View Details</span>
                  </button>
                </div>

                <div className="flex space-x-2">
                  <button className="flex items-center space-x-2 text-text-secondary hover:text-primary transition-colors">
                    <ExternalLink size={16} />
                    <span className="text-sm">References</span>
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default VulnerabilityScanner;